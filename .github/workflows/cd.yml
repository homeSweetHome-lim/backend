name: CD 

on:
   # CI 워크플로우가 완료되었을 때만 실행
  workflow_run:
    workflows: ["Java CI with Gradle"]
    types:
      - completed
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # CI가 성공적으로 끝나면 실행
    
    permissions:
      contents: read
      packages: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # CI에서 업로드된 아티팩트(결과물)를 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-jar # CI에서 업로드한 아티팩트 이름과 동일하게 지정
          path: build/libs/ # 다운로드할 경로
          run-id: ${{ github.event.workflow_run.id }} 
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}


# -------------------- ▼▼▼ Docker 관련 로직 추가 ▼▼▼ --------------------

      # 1. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 2. JAR 파일 이름 변수 설정 (Dockerfile에 전달하기 위함)
      - name: Set JAR file name
        run: |
          JAR_FILE=$(find build/libs -name '*.jar' | head -n 1)
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV
        shell: bash

      # 3. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 위치 (프로젝트 루트)
          file: ./Dockerfile # Dockerfile 이름
          push: true # 빌드 후 푸시 실행
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/our-home:latest # Docker 이미지 태그
          build-args: |
            JAR_FILE=${{ env.JAR_FILE }} # Dockerfile 내부에서 사용할 변수 전달

    # -------------------- ▼▼▼ SSH 원격 배포 로직 추가 ▼▼▼ --------------------

      # 4. SSH로 서버에 접속하여 배포 스크립트 실행
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }} # 서버 IP 주소
          username: ${{ secrets.SSH_USERNAME }} # 서버 접속 계정 (예: ubuntu, ec2-user)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 접속을 위한 Private Key
          script: |
            # 1. GitHub Secret의 내용을 서버에 .env 파일로 생성합니다.
            #    './backend/.env' 경로는 실제 docker-compose.yml 파일이 있는 위치로 수정해야 합니다.
            echo "${{ secrets.DOT_ENV }}" > ./backend/.env

            # 2. docker-compose.yml 파일이 있는 프로젝트 폴더로 이동합니다.
            cd ./backend

            # 3. 최신 이미지를 pull 받습니다 (docker-compose가 자동으로 처리해 주기도 합니다).
            sudo docker-compose pull

            # 4. docker-compose를 사용하여 모든 서비스를 실행(또는 재시작)합니다.
            #    --build 옵션은 이미지를 새로 빌드하라는 의미입니다.
            #    -d 옵션은 백그라운드에서 실행하라는 의미입니다.
            sudo docker-compose up -d --build

